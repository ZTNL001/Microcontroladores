;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Esteban Tapia	Guerrero										                                                            ;
;Uso de Retardos entre salidas de LEDs									                                                ;
;Ingenieria Mecatronica                                                                                 ;
;Microcontroladores											                                                                ;
;V1 22 de Septiembre de 2018	Inicio de programacion							                                      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
LIST P=16F887
#INCLUDE P16F887.INC 

__CONFIG _CONFIG1, _WDT_OFF & _CP_OFF  &_BOR_OFF & _LVP_OFF & _XT_OSC & _MCLRE_ON & _CPD_OFF & _BOR_OFF & _PWRTE_OFF 

CBLOCK  0x20		;Guarda en las localidades 0x20, 0x21 y 0x22 a los registros de proposito general MEM0, MEM1 Y MEM2
	      MEM0
	      MEM1
	      MEM2
	      ENDC

BANK0   MACRO		;Guardado de macros para saltos simples de bancos
        BCF STATUS,RP0
        BCF STATUS,RP1
        ENDM
BANK1   MACRO
	      BSF STATUS,RP0
	      BCF STATUS,RP1
        ENDM
BANK2   MACRO 
        BCF STATUS,RP0
        BSF STATUS,RP1
        ENDM
BANK3   MACRO
      	BSF STATUS,RP0
	      BSF STATUS,RP1
        ENDM

	      ORG	0X00	  ;Reinicio del PIC
	      GOTO 	INICIO
      	ORG 	0X05

INICIO    			    ;Inicializacion
	      BANK1		    ;Salto a Banco1
  	    MOVLW 0XFF	;Movemos un valor 0xFF a W
  	    MOVWF TRISA	;Movemos de W hacia TRISA. Bits: 1=Entrada 0=Salida;
      	BANK3		    ;Salto a Banco3
      	MOVLW 0X00	;Movemos un valor 0x00 a W
      	MOVWF ANSEL	;Movemos de W hacia ANSEL. Bits: 1=ADC en PORTA Activado  0=ADC en PORTA Desactivado
      	BANK1		    ;Salto a Banco1
      	MOVLW 0X00	;Movemos un valor 0x00 a W
      	MOVWF TRISB	;Movemos de W hacia TRISB. Bits: 1=Entrada 0=Salida;
      	BANK3		    ;Salto a Banco3
      	MOVLW 0X00	;Movemos un valor 0x00 a W
	      MOVWF ANSELH	;Movemos de W hacia ANSELH. Bits: 1=ADC en PORTB Activado 0=ADC en PORTB Desactivado
      	BANK0		    ;Salto a Banco0
	      CLRF PORTA	;Limpiamos a PORTA, PORTB y W
	      CLRF PORTB
	      CLRW
	
MAIN			                ;Comienza Diagrama de Flujo
	      BTFSC   PORTB,0	  ; Pregunta por PORTB,0 
	      GOTO	CE	        ;si es 1 salta a CE
	      GOTO	A	          ;si es 0 salta a A
A	
	      BSF PORTB,0	      ;Coloca un 1 en PORTB,0
	      CALL PERIODO	    ;Salta a PERIODO
CE
	      BCF PORTB,0	      ;Coloca un 0 en PORTB,0
	      GOTO PERIODO	    ;Salta a PERIODO
PERIODO
	      MOVLW 0xFF	      ;Prepara los registros generales MEM0, MEM1 y MEM2
      	MOVWF MEM0	      ;Mueve los valores 0xFF a MEM0 y MEM1 y 0x07 a MEM2
      	MOVLW 0xFF
      	MOVWF MEM1
	      MOVLW 0x07
      	MOVWF MEM2
BE			                  ;Comienza el ciclo de retardo
	      DECFSZ MEM0
	      GOTO BE
	      DECFSZ MEM1
	      GOTO BE
	      DECFSZ MEM2
	      GOTO BE
	      GOTO MAIN	;Cuando los registros del retardo son 0, se salta de regreso al MAIN
END
